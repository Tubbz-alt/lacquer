Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Unused terminals:

    ORDER
    BY
    SELECT
    DIVIDE
    INSERT
    LE
    SEMI
    WHERE
    NE
    MINUS
    LT
    PLUS
    COMMA
    INTO
    GT
    STRING
    DECIMAL
    TIMES
    GE
    EQ
    AND
    FROM
    VALUES
    NOT
    OR

Grammar

Rule 0     S' -> table_element
Rule 1     table_element -> IDENTIFIER type
Rule 2     type -> base_type type_parameter_opt
Rule 3     type_parameter_opt -> LPAREN INTEGER RPAREN
Rule 4     type_parameter_opt -> empty
Rule 5     base_type -> IDENTIFIER
Rule 6     empty -> <empty>

Terminals, with rules where they appear

AND                  : 
BY                   : 
COMMA                : 
DECIMAL              : 
DIVIDE               : 
EQ                   : 
FROM                 : 
GE                   : 
GT                   : 
IDENTIFIER           : 1 5
INSERT               : 
INTEGER              : 3
INTO                 : 
LE                   : 
LPAREN               : 3
LT                   : 
MINUS                : 
NE                   : 
NOT                  : 
OR                   : 
ORDER                : 
PLUS                 : 
RPAREN               : 3
SELECT               : 
SEMI                 : 
STRING               : 
TIMES                : 
VALUES               : 
WHERE                : 
error                : 

Nonterminals, with rules where they appear

base_type            : 2
empty                : 4
table_element        : 0
type                 : 1
type_parameter_opt   : 2

Parsing method: LALR

state 0

    (0) S' -> . table_element
    (1) table_element -> . IDENTIFIER type

    IDENTIFIER      shift and go to state 1

    table_element                  shift and go to state 2

state 1

    (1) table_element -> IDENTIFIER . type
    (2) type -> . base_type type_parameter_opt
    (5) base_type -> . IDENTIFIER

    IDENTIFIER      shift and go to state 3

    base_type                      shift and go to state 5
    type                           shift and go to state 4

state 2

    (0) S' -> table_element .



state 3

    (5) base_type -> IDENTIFIER .

    LPAREN          reduce using rule 5 (base_type -> IDENTIFIER .)
    $end            reduce using rule 5 (base_type -> IDENTIFIER .)


state 4

    (1) table_element -> IDENTIFIER type .

    $end            reduce using rule 1 (table_element -> IDENTIFIER type .)


state 5

    (2) type -> base_type . type_parameter_opt
    (3) type_parameter_opt -> . LPAREN INTEGER RPAREN
    (4) type_parameter_opt -> . empty
    (6) empty -> .

    LPAREN          shift and go to state 7
    $end            reduce using rule 6 (empty -> .)

    type_parameter_opt             shift and go to state 6
    empty                          shift and go to state 8

state 6

    (2) type -> base_type type_parameter_opt .

    $end            reduce using rule 2 (type -> base_type type_parameter_opt .)


state 7

    (3) type_parameter_opt -> LPAREN . INTEGER RPAREN

    INTEGER         shift and go to state 9


state 8

    (4) type_parameter_opt -> empty .

    $end            reduce using rule 4 (type_parameter_opt -> empty .)


state 9

    (3) type_parameter_opt -> LPAREN INTEGER . RPAREN

    RPAREN          shift and go to state 10


state 10

    (3) type_parameter_opt -> LPAREN INTEGER RPAREN .

    $end            reduce using rule 3 (type_parameter_opt -> LPAREN INTEGER RPAREN .)

